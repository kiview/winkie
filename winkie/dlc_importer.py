# AUTOGENERATED! DO NOT EDIT! File to edit: 00_dlc_importer.ipynb (unless otherwise specified).

__all__ = ['DLCImporter', 'transform_to_relative', 'add_middle_neck', 'add_rotation', 'apply_rotation']

# Cell
import pandas as pd

class DLCImporter:
    """Used to import DLC result files."""

    def import_hdf(self, file):
        """Import the specified file."""
        df = pd.read_hdf(file)
        df.columns = df.columns.droplevel(0) # drop redundant scorer
        columns_to_drop = ['a1', 'a2', 'a3', 'a4', 'b1', 'b2', 'b3', 'b4']
        df = df.drop(columns_to_drop, axis=1, level=0)
        df.columns = df.columns.remove_unused_levels()
        return df

# Cell
def transform_to_relative(df, bodypart):
    df_rel = df.copy()

    for bp in df.columns.levels[0]:
        df_rel[bp, 'x'] = df[bp, 'x'] - df[bodypart, 'x']
        df_rel[bp, 'y'] = df[bp, 'y'] - df[bodypart, 'y']

    return df_rel

# Cell
def add_middle_neck(df):
    df_middle_neck = df.copy()
    df_middle_neck['middle_neck', 'x'] = (df_middle_neck['left_neck','x'] + df_middle_neck['right_neck', 'x']) / 2
    df_middle_neck['middle_neck', 'y'] = (df_middle_neck['left_neck','y'] + df_middle_neck['right_neck', 'y']) / 2
    return df_middle_neck

# Cell
import numpy as np

def add_rotation(df):
    df = df.copy()
    df['rotation_angle'] = np.degrees(np.arctan2(df['middle_neck', 'y'], df['middle_neck', 'x']))
    return df

# Cell
def apply_rotation(df):
    df = df.copy()
    df.apply(_rotate_row, axis=1)
    return df

def _rotate_row(x):
    theta = np.radians(x['rotation_angle'][0] - 90)

    body_parts = list(x.index.levels[0])
    body_parts.remove('rotation_angle')

    for b in body_parts:
        x1, y = x[b,'x'], x[b,'y']

        c, s = np.cos(theta), np.sin(theta)
        rot = np.matrix([[c, s], [-s, c]])

        rotated = np.dot(rot, [x1, y])

        x[b, 'x'] = rotated[0, 0]
        x[b, 'y'] = rotated[0, 1]

    return x